// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecipeFinder.Data;

#nullable disable

namespace RecipeFinder.Data.Migrations
{
    [DbContext(typeof(RecipeFinderDbContext))]
    [Migration("20240417094649_AddedMoreRecipesAndMadeFinalChanges")]
    partial class AddedMoreRecipesAndMadeFinalChanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("This Category Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("The Category Name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Appetizer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Main Course"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dessert"
                        });
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Comment Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Comment Author Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasComment("Comment Description");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Comment Posted Date");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasComment("Recipe Identifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Comment Title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            Description = "I made this with your recipe and its awesome.",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 513, DateTimeKind.Local).AddTicks(8737),
                            RecipeId = 9,
                            Title = "Very good brownies"
                        });
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("This Difficulty Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Difficulty Description");

                    b.Property<string>("IngredientComplexity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The Ingredient Complexity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("The Difficulty Name");

                    b.Property<decimal>("SkillLevel")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The recommended skill level that the cook should have");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Recipes suitable for novice cooks with basic cooking skills.",
                            IngredientComplexity = "Common ingredients.",
                            Name = "Beginner",
                            SkillLevel = 1m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Recipes requiring some cooking experience and familiarity with various cooking techniques.",
                            IngredientComplexity = "Mix of common and some specialty ingredients.",
                            Name = "Intermediate",
                            SkillLevel = 3m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Recipes suitable for experienced cooks with confidence in their cooking skills.",
                            IngredientComplexity = "Primarily specialty ingredients.",
                            Name = "Advanced",
                            SkillLevel = 5m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Highly challenging recipes requiring expert-level cooking skills and experience.",
                            IngredientComplexity = "Rare or exotic ingredients.",
                            Name = "Expert",
                            SkillLevel = 7m
                        },
                        new
                        {
                            Id = 5,
                            Description = "Culinary creations for professionals or exceptionally skilled home cooks.",
                            IngredientComplexity = "Varied, may include rare, seasonal, or hard-to-find ingredients.",
                            Name = "Master Chef",
                            SkillLevel = 9m
                        });
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The Ingredient Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The Ingredient Name");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The Ingredient Quantity");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasComment("Recipe Identifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("The unit in which the ingredient is measured");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Name = "chicken thighs",
                            Quantity = 4m,
                            RecipeId = 5,
                            Unit = "pieces"
                        },
                        new
                        {
                            Id = 12,
                            Name = "cheddar cheese",
                            Quantity = 2m,
                            RecipeId = 6,
                            Unit = "cups"
                        },
                        new
                        {
                            Id = 11,
                            Name = "macaroni",
                            Quantity = 1m,
                            RecipeId = 6,
                            Unit = "cup"
                        },
                        new
                        {
                            Id = 13,
                            Name = "cream cheese",
                            Quantity = 2m,
                            RecipeId = 7,
                            Unit = "cups"
                        },
                        new
                        {
                            Id = 14,
                            Name = "dark chocolate",
                            Quantity = 200m,
                            RecipeId = 8,
                            Unit = "grams"
                        },
                        new
                        {
                            Id = 15,
                            Name = "dark chocolate",
                            Quantity = 200m,
                            RecipeId = 9,
                            Unit = "grams"
                        },
                        new
                        {
                            Id = 16,
                            Name = "avocado",
                            Quantity = 2m,
                            RecipeId = 10,
                            Unit = "pieces"
                        },
                        new
                        {
                            Id = 17,
                            Name = "all-purpose flour",
                            Quantity = 3m,
                            RecipeId = 13,
                            Unit = "cups"
                        },
                        new
                        {
                            Id = 18,
                            Name = "cornbread mix",
                            Quantity = 1m,
                            RecipeId = 11,
                            Unit = "package"
                        },
                        new
                        {
                            Id = 19,
                            Name = "tri-tip beef",
                            Quantity = 1m,
                            RecipeId = 14,
                            Unit = "pound"
                        },
                        new
                        {
                            Id = 20,
                            Name = "white fish fillets",
                            Quantity = 4m,
                            RecipeId = 15,
                            Unit = "pieces"
                        },
                        new
                        {
                            Id = 21,
                            Name = "all-purpose flour",
                            Quantity = 2m,
                            RecipeId = 12,
                            Unit = "cups"
                        });
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("The Recipe Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("The Recipe Category Id");

                    b.Property<string>("CookId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("The Cook Identifier");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int")
                        .HasComment("The Recipe Difficulty Id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The Recipe Cover Image");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("The Recipe Instructions");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("The Recipe Name");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of post");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int")
                        .HasComment("The Recipe Preparation Time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CookId");

                    b.HasIndex("DifficultyId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 2,
                            ImageUrl = "https://assets.kulinaria.bg/attachments/pictures-images/0000/1918/MAIN-vegetarianska-musaka.jpg?1431936459",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Slice potatoes & eggplants\r\n3. Heat olive oil. Cook onions until soft. Add ground beef, garlic, tomato paste, diced tomatoes, oregano, cinnamon, salt & pepper. Simmer.\r\n4. Fry potato slices until golden brown.\r\n5. Layer potatoes, eggplants, & meat mixture. Repeat layers.\r\n6. Whisk eggs & yogurt. Pour over meat.\r\n7. Bake at 180°C (350°F) for 45 minutes to 1 hour.\r\n8. Cool before serving. Enjoy!\r\n",
                            Name = "Moussaka",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1767),
                            PreparationTime = 60
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 1,
                            ImageUrl = "https://imagesvc.meredithcorp.io/v3/mm/image?url=https%3A%2F%2Fimages.media-allrecipes.com%2Fuserphotos%2F7929481.jpg&q=60&c=sc&poi=auto&orient=true&h=512",
                            Instructions = "Mix flour, milk, egg, butter, sugar, baking powder, and salt together.\r\n\r\nHeat a lightly oiled griddle over low heat. Scoop 1/4 cup batter onto the griddle and cook until top and edges are dry, 3 to 4 minutes. Flip and cook until lightly browned on the other side, 2 to 3 minutes. Repeat with remaining batter.",
                            Name = "Homemade Pancakes",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1808),
                            PreparationTime = 35
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 4,
                            ImageUrl = "https://www.allrecipes.com/thmb/Z4Mdrd87chexT64ykV5o1cK0ZKM=/0x512/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/231939_Honey-Glazed-Chicken_Adam-Vaccarezza_4564886_original-4x3-1-acb1de801b6541b69e06bf7b731c1b60.jpg",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Season chicken with salt & pepper.\r\n3. Heat oil in a skillet. Brown chicken on both sides.\r\n4. Mix honey, soy sauce, garlic, & ginger. Pour over chicken.\r\n5. Bake for 30 minutes.\r\n6. Baste chicken with sauce. Bake for another 15 minutes.\r\n7. Serve with rice or vegetables. Enjoy!\r\n",
                            Name = "Honey Glazed Chicken",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1813),
                            PreparationTime = 20
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 1,
                            ImageUrl = "https://imagesvc.meredithcorp.io/v3/mm/image?url=https%3A%2F%2Fstatic.onecms.io%2Fwp-content%2Fuploads%2Fsites%2F43%2F2022%2F03%2F19%2F238691-Simple-Macaroni-And-Cheese-mfs_006.jpg&q=60&c=sc&poi=auto&orient=true&h=512",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Cook macaroni according to package instructions.\r\n3. Melt butter in a saucepan. Stir in flour, salt, pepper, & mustard.\r\n4. Add milk. Cook & stir until thickened.\r\n5. Add cheese. Stir until melted.\r\n6. Combine macaroni & cheese sauce.\r\n7. Pour into a baking dish. Top with breadcrumbs.\r\n8. Bake for 30 minutes. Enjoy!\r\n",
                            Name = "Macaroni and Cheese",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1817),
                            PreparationTime = 15
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 2,
                            ImageUrl = "https://www.allrecipes.com/thmb/dys0tqgU7Sow1d_DS_S9Jf6NeAI=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/AllRecipes_Grandmothers_Cheesecake_0003-2000-06db8cb260484b81aa1dbd0d904603a1.jpg",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Mix graham cracker crumbs, sugar, & butter. Press into a pan.\r\n3. Beat cream cheese, sugar, & vanilla until smooth.\r\n4. Add eggs one at a time. Beat well.\r\n5. Pour over crust. Bake for 1 hour.\r\n6. Cool. Chill for 4 hours. Enjoy!\r\n",
                            Name = "Classic Cheesecake",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1821),
                            PreparationTime = 15
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 2,
                            ImageUrl = "https://www.allrecipes.com/thmb/BVIa5dKfGQlpQJ_epc6wH6Vm990=/0x512/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/IMG_8145_Chocolate-Mousse-for-Beginners-4x3-cropped-757ae43035ff48cc8bc9ccffbd6cf3b7.jpg",
                            Instructions = "1. Melt chocolate & butter. Cool.\r\n2. Beat egg yolks & sugar. Add chocolate mixture.\r\n3. Beat egg whites & sugar until stiff peaks form.\r\n4. Fold into chocolate mixture.\r\n5. Pour into cups. Chill for 4 hours. Enjoy!\r\n",
                            Name = "Chocolate Mousse",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1825),
                            PreparationTime = 15
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 1,
                            ImageUrl = "https://www.allrecipes.com/thmb/iyfZNNm7WSl-1HVUzWjF9SpRST8=/0x512/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/8551641-CopycatCosmicBrownie_DDMFS-248-4x3-566596741ece4186b38d600960c75502.jpg",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Melt butter & chocolate. Cool.\r\n3. Beat eggs, sugar, & vanilla. Add chocolate mixture.\r\n4. Mix in flour, salt, & baking powder.\r\n5. Pour into a pan. Bake for 30 minutes.\r\n6. Cool. Cut into squares. Enjoy!\r\n",
                            Name = "Brownies",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1829),
                            PreparationTime = 15
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 4,
                            ImageUrl = "https://www.allrecipes.com/thmb/4oKhDBSBYC3abBYCbYB-IhGOWt4=/0x512/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/4521556_Guacamole4x3photobybd.weld-c81ae0bd3f2b4893a8e309365dda023b.jpg",
                            Instructions = "1. Mash avocados in a bowl.\r\n2. Stir in onion, garlic, tomato, lime juice, salt, & pepper.\r\n3. Chill for 30 minutes. Enjoy!\r\n",
                            Name = "Guacamole",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1833),
                            PreparationTime = 25
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 2,
                            ImageUrl = "https://www.allrecipes.com/thmb/qQ6I8RE2ywUQqLKn9Kwz3TODXKo=/0x512/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/8426520_Buffalo-Wing-Pretzels_Nicole-Russell_4x3-bb2e8f6880cc4415bd724088f946a871.jpg",
                            Instructions = "1. Mix warm water, yeast, sugar, & salt. Add flour. Knead.\r\n2. Let dough rise for 1 hour.\r\n3. Divide dough into pieces. Roll into ropes. Shape into pretzels.\r\n4. Dip in baking soda water. Bake at 230°C (450°F) for 10 minutes.\r\n5. Brush with melted butter. Enjoy!\r\n",
                            Name = "Pretzels",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1844),
                            PreparationTime = 15
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 3,
                            ImageUrl = "https://www.allrecipes.com/thmb/IsH0QXPRWAr8fCiwgmPxoL2SovE=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/8623032_Cornbread-Taco-Bake_TheDailyGourmet_4x3-dc4b1ba794194b4f88eb9de04db33fd7.jpg",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Cook beef, onion, & garlic. Drain.\r\n3. Stir in beans, tomatoes, corn, & taco seasoning.\r\n4. Mix cornbread. Pour over beef mixture.\r\n5. Bake for 20 minutes.\r\n6. Top with cheese. Bake for another 10 minutes.\r\n7. Serve with sour cream & salsa. Enjoy!\r\n",
                            Name = "Cornbread Taco Bake",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1837),
                            PreparationTime = 30
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 2,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 5,
                            ImageUrl = "https://imagesvc.meredithcorp.io/v3/mm/image?url=https%3A%2F%2Fstatic.onecms.io%2Fwp-content%2Fuploads%2Fsites%2F43%2F2022%2F05%2F30%2F236992-santa-maria-grilled-tri-tip-beef-ddmfs-1x1-1.jpg&q=60&c=sc&poi=auto&orient=true&h=512",
                            Instructions = "1. Preheat grill to high heat.\r\n2. Season beef with salt, pepper, & garlic powder.\r\n3. Grill beef for 5 minutes per side.\r\n4. Reduce heat. Grill for 20 minutes.\r\n5. Let beef rest for 10 minutes. Slice & serve. Enjoy!\r\n",
                            Name = "Grilled Tri-Tip Beef",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1949),
                            PreparationTime = 60
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 2,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 5,
                            ImageUrl = "https://www.allrecipes.com/thmb/ywnMvmkYn5obresV_z3-oSW_wac=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/8611251_Fish-Puttanesca_Brenda-Venable_4x3-b51d77e6c84440609a3c8faf183dc8d2.jpg",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Season fish with salt & pepper.\r\n3. Heat oil in a skillet. Brown fish on both sides.\r\n4. Add garlic, anchovies, capers, olives, & tomatoes. Simmer.\r\n5. Bake for 20 minutes.\r\n6. Serve with pasta or bread. Enjoy!\r\n",
                            Name = "Fish Puttanesca",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1955),
                            PreparationTime = 30
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            CookId = "dea12856-c198-4129-b3f3-b893d8395082",
                            DifficultyId = 5,
                            ImageUrl = "https://www.allrecipes.com/thmb/L8M8tLuZhT5iZshsHoLh6KTwuC8=/750x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/9224625_EasyVanillaCake4x3-bf9a73c9f6024e9286d96e8f0b59d35d.jpg",
                            Instructions = "1. Preheat oven to 180°C.\r\n2. Mix flour, baking powder, & salt.\r\n3. Beat butter & sugar. Add eggs & vanilla.\r\n4. Add flour mixture & milk. Mix well.\r\n5. Pour into pans. Bake for 30 minutes.\r\n6. Cool. Frost with buttercream. Enjoy!\r\n",
                            Name = "Vanilla Cake",
                            PostedOn = new DateTime(2024, 4, 17, 12, 46, 48, 562, DateTimeKind.Local).AddTicks(1841),
                            PreparationTime = 30
                        });
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.RecipeUser", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int")
                        .HasComment("Recipe Identifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Maker Identifier");

                    b.HasKey("RecipeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RecipesUsers");
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96b3fbf0-484b-4bfb-9e5e-79c94246503f",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user@gmail.com",
                            NormalizedUserName = "user@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlbXyvAuCWqGNMN53YePmCKpNut+HEKmuwPdlBZ3q/hWeUyjdus+nUasLjo9Vzsew==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b136088e-3762-4765-82c8-b8bdb5a1c8f4",
                            TwoFactorEnabled = false,
                            UserName = "user@gmail.com",
                            FirstName = "Test",
                            LastName = "User",
                            ProfilePicture = ""
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a95a2a15-12cc-4567-9cfb-eeaa67294b07",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@gmail.com",
                            NormalizedUserName = "guest@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEF/ATRWMCVXYuXoI6jeKvG8p+fxwsswjnonIF0QTHcbYB1cwEERjdTc3aFty7qX2MA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c6dc899-c0a3-44f8-934e-6790d27de1a8",
                            TwoFactorEnabled = false,
                            UserName = "guest@gmail.com",
                            FirstName = "Test",
                            LastName = "Guest",
                            ProfilePicture = "https://www.pngitem.com/pimgs/m/146-1468479_my-profile-icon-blank-profile-picture-circle-hd.png"
                        },
                        new
                        {
                            Id = "8acdd283-300d-4ef1-a83f-813efc164767",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f44e95e-21b7-43aa-a0db-6a3e60a2073d",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENnTs+RB+TQx6rULyVHvqsPoOsejParYdwhEKSK7Hoih+YAJfss99w6RhO49OZrLNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60fc04fe-0926-4f24-bff4-e3b762b68ccb",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            ProfilePicture = "https://www.pngmart.com/files/21/Admin-Profile-Vector-PNG-Clipart.png"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.Recipe", "Recipe")
                        .WithMany("Comments")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Ingredient", b =>
                {
                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Recipe", b =>
                {
                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.ApplicationUser", "Cook")
                        .WithMany()
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Cook");

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.RecipeUser", b =>
                {
                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.Recipe", "Recipe")
                        .WithMany("RecipesUsers")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RecipeFinder.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecipeFinder.Infrastructure.Data.Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Ingredients");

                    b.Navigation("RecipesUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
